import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.bc.issue.IssueService
import com.atlassian.jira.bc.issue.IssueService.IssueResult
import com.atlassian.jira.bc.issue.IssueService.UpdateValidationResult

// Get some components
def loggedInUser = ComponentAccessor.jiraAuthenticationContext.loggedInUser
def issueService = ComponentAccessor.issueService

// Set variables
def issue = event.issue;
def issueId = issue.id
def comment = event.getComment()
def commentBody = event.getComment().getBody()

def issueInputParameters = issueService.newIssueInputParameters()

if(issue.getDescription() != null){
issueInputParameters.setDescription(issue.getDescription()+"\n"+ comment.getAuthorFullName() + " - " + comment.getCreated() +"\n"+ commentBody +"\n");
}
else{
issueInputParameters.setDescription(comment.getAuthorFullName() + " - " + comment.getCreated() +"\n"+ commentBody +"\n");
}

UpdateValidationResult validationResult = issueService.validateUpdate(loggedInUser, issueId, issueInputParameters)
assert validationResult.isValid() : validationResult.getErrorCollection()
IssueResult updateResult = issueService.update(loggedInUser, validationResult)
assert updateResult.isValid() : updateResult.getErrorCollection()


